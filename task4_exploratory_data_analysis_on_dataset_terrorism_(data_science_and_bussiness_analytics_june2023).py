# -*- coding: utf-8 -*-
"""TASK4-Exploratory Data Analysis on Dataset - Terrorism (DATA SCIENCE AND BUSSINESS ANALYTICS-JUNE2023)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jE-0YQvB-Vj17TF_8EiJUGFy4b4iu3kp
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv('/content/globalterrorism.csv',encoding='ISO-8859-1')

data.head(10)

data.shape

data.info

data.info()

data.isnull()

data.isnull().sum()

data.describe

data.describe()

data.columns

data.rename(columns={'iyear':'Year','imonth':'Month','iday':'Day','country_txt':'Country','provstate':'state',
                       'region_txt':'Region','attacktype1_txt':'AttackType','target1':'Target','nkill':'Killed',
                       'nwound':'Wounded','summary':'Summary','gname':'Group','targtype1_txt':'Target_type',
                       'weaptype1_txt':'Weapon_type','motive':'Motive'},inplace=True)

#data=data.rename(columns = {'iyear':'year','imonth':'month', 'iday':'day','country':'country','country_txt':'country_name','region':'region','region_txt':'region_name','provstate':'state','city':'city','latitude':'latitude','longitude':'longitude','success':'success','sucide':'sucide','attacktype1':'attacked','attacktype1_txt':'attacktype','targtype1':'targettype','targtype1_txt':'targeton','targsubtype1':'targeted','targsubtype1_txt':'targeton','corp1':'corportion','target1':'target','natlty1':'natlty','natlty1_txt':'natltyname','gname':'gang_name','weaptype1_txt':'weapon','weapdetail':'weapdetails', 'nkill':'killed','nwound':'wounded','property':'property','ishostkid':'kids','dbsource':'source'})

data

data['country'].value_counts()

data.drop('eventid',axis=1)

data = data.fillna('-')

data

data.isnull()

data.info()

data=data[['Year','Month','Day','Country','state','Region','city','latitude','longitude','AttackType','Killed',
               'Wounded','Target','Group','Target_type','Weapon_type','Motive']]

data

data.info()

data.isnull()

data.isnull().sum()

print("Country with the most attacks:",data['Country'].value_counts().idxmax())

print("City with the most attacks:",data['city'].value_counts().index[1]) #as first entry is 'unknown'

print("Region with the most attacks:",data['Region'].value_counts().idxmax())

print("Year with the most attacks:",data['Year'].value_counts().idxmax())

print("Month with the most attacks:",data['Month'].value_counts().idxmax())

print("Group with the most attacks:",data['Group'].value_counts().index[1])

print("Most Attack Types:",data['AttackType'].value_counts().idxmax())

print("Country with the less attacks:",data['Country'].value_counts().idxmin())
print("Region with the less attacks:",data['Region'].value_counts().idxmin())
print("Year with the less attacks:",data['Year'].value_counts().idxmin())
print("Month with the less attacks:",data['Month'].value_counts().idxmin())
print("Less Attack Types:",data['AttackType'].value_counts().idxmin())

x_year = data['Year'].unique()
x_year

y_count_years = data['Year'].value_counts(dropna = False).sort_index()
y_count_years

plt.figure(figsize = (18,10))
sns.barplot(x = x_year,
           y = y_count_years,
           palette = 'rocket')
plt.xticks(rotation = 45)
plt.xlabel('Attack Year')
plt.ylabel('Number of Attacks each year')
plt.title('Attack_of_Years')
plt.show()

correlation=data.corr()
correlation

import seaborn as sns
sns.heatmap(data.corr(),annot=True,cmap='inferno')

print(data["city"].unique())

print(data["Killed"].unique())

#sns.barplot(x = 'city',y ='Killed',data = data)
#plt.show()

t1 = data['city'].value_counts()[:100]
t1.plot(kind='bar',figsize=(60,20))
plt.title('city')

data['city'].value_counts()

sns.set_style("whitegrid")
  
sns.boxplot(x = 'Month', y = 'Killed', data = data)

bplot = sns.boxplot(y='Killed', x='Year', 
                 data=data, 
                 width=0.5,
                 palette="colorblind")